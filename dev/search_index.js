var documenterSearchIndex = {"docs":
[{"location":"#GaussianRandomFields.jl-1","page":"Home","title":"GaussianRandomFields.jl","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"A package for Gaussian random field generation in Julia","category":"page"},{"location":"#Introduction-1","page":"Home","title":"Introduction","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"This package provides a collection of Gaussian random field generators, such as the Karhunen-Loève expansion and circulant embedding, for various well-known isotropic covariance functions, including the exponential, Matérn and Gaussian covariance, and some less-known anisotropic covariance functions. Defining your own covariance function is easy. The package supports Gaussian random fields defined on rectangular structured grids, and triangular unstructured (Finite Element) grids.   ","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Here are some examples!","category":"page"},{"location":"#","page":"Home","title":"Home","text":"<img src=\"assets/examples.png\" alt=\"examples\" style=\"width:100%\">","category":"page"},{"location":"#Installation-1","page":"Home","title":"Installation","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"GaussianRandomFields is a registered package and so can be installed via","category":"page"},{"location":"#","page":"Home","title":"Home","text":"] add GaussianRandomFields","category":"page"},{"location":"#Usage-1","page":"Home","title":"Usage","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"See the Tutorial for an introduction on how to use this package (including fancy pictures!)\nSee the API for a detailed manual","category":"page"},{"location":"tutorial/#Tutorial-1","page":"Tutorial","title":"Tutorial","text":"","category":"section"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"This tutorial contains some examples on how to use GaussianRandomFields.","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"warning: Warning\nDon't forget to import GaussianRandomFields before running the examples belowusing GaussianRandomFields","category":"page"},{"location":"tutorial/#Table-of-Contents-1","page":"Tutorial","title":"Table of Contents","text":"","category":"section"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"Pages = [\"tutorial.md\"]\nDepth = 3","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"A Gaussian random field is a function that describes a random quantity at each point in space. Below are three example realizations of a Gaussian random field with exponential covariance.","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"cov = CovarianceFunction(2, Exponential(.5))\npts = range(0, stop=1, length=1001)\ngrf = GaussianRandomField(cov, CirculantEmbedding(), pts, pts, minpadding=2001)\nheatmap(grf)","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"<img src=\"assets/exponential_grf.png\" alt=\"exponential_grf\" style=\"width:100%\">","category":"page"},{"location":"tutorial/#Package-Overview-1","page":"Tutorial","title":"Package Overview","text":"","category":"section"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"This package offers support to generate and sample from Gaussian random fields. Gaussian random fields can be classified as follows.","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"<p align=\"center\">\n<img src=\"assets/classification.png\" alt=\"classification\" style=\"width:75%\" align=\"middle\">\n</p>","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"We offer support for stationary separable random fields and stationary non-separable isotropic and anisotropic random fiels. This includes isotropic random fields with commonly used covariance functions, such as the exponential, Matérn, Whittle and Gaussian kernel, and anisotropic random fields, such as the anisotropic exponential kernel and the rotated anisotropic Matérn kernel. The Gaussian random fields can be defined on a rectangular structured grid, or on a Finite Element triangular unstructured mesh. ","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"The basic syntax is as follows.","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"cov = CovarianceFunction(d, Kernel()) # covariance function in d dimensions with kernel Kernel()\npts_x = range(a, stop=b, length=n) # structured grid (see below for unstructured grids)\npts_y = range(a, stop=b, length=n) # ... (d times)\ngrf = GaussianRandomField(cov, Generator(), pts_x, pts_y) # Gaussian random field with generator Generator()\nsample(grf) # take a sample of the Gaussian random field","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"In these expressions, Kernel() must be replaced by a call to either a predefined covariance kernel, or to a user-defined kernel. Here's a list of predefined kernels:","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"exponential kernel, see Exponential\nlinear (or triangular) kernel, see Linear\nspherical kernel, see Spherical\nWhittle kernel, see Whittle\nGaussian (or squared exponential) kernel, see Gaussian\nMatérn kernel, see Matern\nanisotropic exponential kernel, see AnisotropicExponential","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"The Gaussian random field generator Generator() must be replaced by a call to a predefined Gaussian random field generator:","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"a Cholesky factorization of the covariance matrix, see Cholesky\nan eigenvalue decomposition of the covariance matrix, see Spectral\na truncated Karhunen-Loève expansion, see KarhunenLoeve\na circulant embedding, see CirculantEmbedding","category":"page"},{"location":"tutorial/#Examples-1","page":"Tutorial","title":"Examples","text":"","category":"section"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"Let's first look at some examples.","category":"page"},{"location":"tutorial/#D-Exponential-Covariance-Function-1","page":"Tutorial","title":"1D Exponential Covariance Function","text":"","category":"section"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"As a first example, consider the exponential covariance kernel, defined as","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"C(x y) = σ expleft(-displaystylefracρλright)","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"with ρ = x - y_p, and where λ is a length scale.","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"exponential = Exponential(0.1) # 0.1 is the length scale λ","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"Let's define a one-dimensional exponential covariance function.","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"cov = CovarianceFunction(1, exponential) # 1 is the number of dimensions.","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"Now, suppose the Gaussian process is defined on [0, 1].","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"pts = range(0, stop=1, length=1001) # 1001 is the number of points","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"Here's how to compute the Gaussian process with exponential covariance function cov defined in the points pts.","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"grf = GaussianRandomField(cov, Cholesky(), pts)","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"Here are some samples of the random field.","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"plot(grf)\nplot!(grf)\nplot!(grf)","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"<img src=\"assets/1d_exponential.png\" alt=\"1d_exponential\" style=\"width:100%\">","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"See also: Exponential, CovarianceFunction, GaussianRandomField, Cholesky, plot","category":"page"},{"location":"tutorial/#D-Matérn-Covariance-Function-1","page":"Tutorial","title":"2D Matérn Covariance Function","text":"","category":"section"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"In this second example, we switch from random procesess (d=1) to random fields (d>1). A well-known stationary isotropic covariance kernel is the Matérn covariance kernel","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"C(x y) = σ frac2^1 - νΓ(ν) left(fracρλright)^ν K_νleft(fracρλright)","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"with ρ = x - y_p, where λ is a length scale and ν is the smoothness.","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"cov = CovarianceFunction(2, Matern(1/4, 3/4)) # length scale 1/4, smoothness 3/4","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"We generate samples of this random field on a regular grid with grid spacing 1/400 using circulant embedding. This is a fast and exact sampling method that uses an FFT.","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"pts = range(0, stop=1, step=1/400)\ngrf = GaussianRandomField(cov, CirculantEmbedding(), pts, pts, minpadding=113)\nheatmap(grf)","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"<img src=\"assets/2d_matern.png\" alt=\"2d_matern\" style=\"width:100%\">","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"Here is a visual comparison of the random field with a decreasing smoothness parameter ν.","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"for ν in [5/4, 1, 7/8, 3/4, 5/8, 1/2]\n    cov = CovarianceFunction(2, Matern(1/4, ν))\n    grf = GaussianRandomField(cov, CirculantEmbedding(), pts, pts, minpadding=625)\n    heatmap(grf)\nend","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"<img src=\"assets/matern_smoothness.png\" alt=\"matern_smoothness\" style=\"width:100%\">","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"See also: Matern, CovarianceFunction, GaussianRandomField, CirculantEmbedding, heatmap","category":"page"},{"location":"tutorial/#D-Anisotropic-Convariance-Function-1","page":"Tutorial","title":"2D Anisotropic Convariance Function","text":"","category":"section"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"In the last example, we focus on anisotropic random fields. These random fields behave differently in different directions. For example, the anisotropic exponential covariance kernel is defined as","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"C(x y) = exp(-ρᵀ A ρ)","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"where ρ = x - y and A is a positive definite matrix.","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"A = [1000 800; 800 1000]\ncov = CovarianceFunction(2, AnisotropicExponential(A))","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"Here are some samples of this random field.","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"<img src=\"assets/anisotropic.png\" alt=\"anisotropic\" style=\"width:100%\">","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"See also: AnisotropicExponential, CovarianceFunction, GaussianRandomField, KarhunenLoeve, heatmap","category":"page"},{"location":"tutorial/#Gaussian-Random-Field-Generators-1","page":"Tutorial","title":"Gaussian Random Field Generators","text":"","category":"section"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"Different methods for generating Gaussian random fields are available: Cholesky(), Spectral(), KarhunenLoeve(n) and CirculantEmbedding. We will briefly discuss these below. ","category":"page"},{"location":"tutorial/#Cholesky-Factorization-1","page":"Tutorial","title":"Cholesky Factorization","text":"","category":"section"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"A Gaussian random field generator based on the Cholesky factorization of the covariance matrix.","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"cov = CovarianceFunction(2, Matern(1/2, 5/4))\npts = range(0, stop=1, length=101)\ngrf = GaussianRandomField(cov, Cholesky(), pts, pts)\ncontourf(grf)","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"<img src=\"assets/cholesky.png\" alt=\"cholesky\" style=\"width:100%\">","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"If more points are used, and especially in higher dimensions, computing the Choleksy factorization becomes too expensive. Furthermore, the expansion can only be computed when the covariance matrix is symmetric positive definite (SPD). If this is not the case, try using Spectral() instead.","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"See Cholesky for more.","category":"page"},{"location":"tutorial/#Eigenvalue-Decomposition-1","page":"Tutorial","title":"Eigenvalue Decomposition","text":"","category":"section"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"A Gaussian random field generator based on the eigenvalue decomposition of the covariance matrix.","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"cov = CovarianceFunction(2, Linear(1))\npts = range(0, stop=1, length=51)\ngrf = GaussianRandomField(cov, Spectral(), pts, pts)\ncontourf(grf)","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"<img src=\"assets/spectral.png\" alt=\"spectral\" style=\"width:100%\">","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"See Spectral for more.","category":"page"},{"location":"tutorial/#Karhunen-Loève-Expansion-1","page":"Tutorial","title":"Karhunen-Loève Expansion","text":"","category":"section"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"A Gaussian random field generator using a truncated Karhunen-Loève expansion with n terms.","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"cov = CovarianceFunction(2, Whittle(.1))\npts = range(0, stop=1, length=201)\ngrf = GaussianRandomField(cov, KarhunenLoeve(500), pts, pts)\nheatmap(grf)","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"<img src=\"assets/karhunen_loeve.png\" alt=\"karhunen_loeve\" style=\"width:100%\">","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"The KL expansion uses a linear combination of eigenfunctions of the covariance operator, where the weights are determined by the magnitude of the eigenvalues.","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"plot_eigenvalues(grf)\nplot_eigenfunction(grf, n) # n is eigenfunction number 1, 2, ..., 6","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"<img src=\"assets/eigenvalues.png\" alt=\"eigenvalues\" style=\"width:100%\">","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"<img src=\"assets/eigenfunctions.png\" alt=\"eigenfunctions\" style=\"width:100%\">","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"Adding more terms to the expansion increases the approximation of the Gaussian random field.","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"for n in [1 2 5 10 20 50 100 200 500 1000]\n    grf = GaussianRandomField(cov, KarhunenLoeve(n), pts, pts)\n    @printf(\" n = %4d | error = %0.4f\\n\", n, rel_error(grf))\nend","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":" n =    1 | error = 0.7499\n n =    2 | error = 0.4999\n n =    5 | error = 0.4318\n n =   10 | error = 0.3188\n n =   20 | error = 0.1302\n n =   50 | error = 0.0695\n n =  100 | error = 0.0287\n n =  200 | error = 0.0092\n n =  500 | error = 0.0017\n n = 1000 | error = 0.0004","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"See KarhunenLoeve for more.","category":"page"},{"location":"tutorial/#Circulant-Embedding-1","page":"Tutorial","title":"Circulant Embedding","text":"","category":"section"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"A Gaussian random field generator that uses an FFT, but is restricted to rectangular structured grids. In this case, the covariance matrix has a Toeplits structure (d=1), a block Toeplitz structure with Toeplitz blocks (d=2), ... This structure can be exploited by embedding the matrix in a larger circulant matrix, of which the eigenvalues can be computed very efficiently using FFT.","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"Here's the covariance matrix of the exponential covariance function in two dimensions.","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"cov = CovarianceFunction(2, Exponential(1))\npts = range(0, stop=1, length=11)\nC = apply(cov, pts, pts)\nheatmap(C)","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"<p align=\"center\">\n<img src=\"assets/covariance_matrix.png\" alt=\"covariance_matrix\" style=\"width:75%\" align=\"middle\">\n</p>","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"warning: Warning\nA small catch here is that, although the covariance matrix is positive semi-definite, its circulant extension in general is not.","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"Hence, we must add some ghost points outside the domain of interest using the optional argument padding. If the matrix is not positive definite, an approximated Gaussian random field will still be computed using only the positive eigenvalues of the covariance matrix. Depending on the size of the smallest eigenvalue, this approximation may or may not be useable in practice.","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"cov = CovarianceFunction(2, Exponential(.5))\npts = range(0, stop=1, length=1001)\ngrf = GaussianRandomField(cov, CirculantEmbedding(), pts, pts, minpadding=2001)\nheatmap(grf)","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"<img src=\"assets/exponential_grf.png\" alt=\"exponential_grf\" style=\"width:100%\">","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"See CirculantEmbedding for more.","category":"page"},{"location":"tutorial/#Defining-Custom-Covariance-Functions-1","page":"Tutorial","title":"Defining Custom Covariance Functions","text":"","category":"section"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"Defining your own covariance function is easy. Here's an example using the two-dimensional rotated anisotropic Matérn covariance function.","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"using SpecialFunctions # for besselk and gamma\n\nimport GaussianRandomFields: shortname, apply\n\nstruct RotatedAnisotropicMatern{T} <: AnisotropicCovarianceStructure{T}\n    λ::T\n    ν::T\n    η::T\n    θ::T\n    σ::T\n    p::T\nend\n\nRotatedAnisotropicMatern(λ::Real, ν::Real; η::Real=1.0, θ::Real=0, σ::Real=1.0, p::Real=2) =\n    RotatedAnisotropicMatern{promote_type(typeof.((λ, ν, η, θ, σ, p))...)}(promote(λ, ν, η, θ, σ, p)...)\n\nshortname(::RotatedAnisotropicMatern) = \"rotated anisotropic Matérn\"\n\nrot(θ) = [cos(θ) -sin(θ); sin(θ) cos(θ)]\n\nfunction apply(r::RotatedAnisotropicMatern, x::AbstractVector)\n    x_rotated = rot(r.θ * π/180) * x\n    ρ = 1/r.λ * sqrt(x_rotated[1]^2/r.η^2 + x_rotated[2]^2)\n    if iszero(ρ)\n        float(one(ρ))\n    else\n        2^(1 - r.ν) / gamma(r.ν) * (ρ / r.λ)^r.ν * besselk(r.ν, ρ / r.λ)\n    end\nend","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"This covariance function has two additional parameters, η, the anisotropic ration, and θ, an angle, expressed in degrees. Here are some samples of the random field for different choices of the parameters η and θ.","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"cov = CovarianceFunction(2, RotatedAnisotropicMatern(1/4, 1/2, η=1/16, θ=45))\npts = range(0, stop=1, length=1001)\ngrf = GaussianRandomField(cov, CirculantEmbedding(), pts, pts)\nheatmap(grf)","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"<img src=\"assets/rotated_anisotropic_matern_grf.png\" alt=\"rotated_anisotropic_matern_grf\" style=\"width:100%\">","category":"page"},{"location":"tutorial/#Unstructured-Grids-1","page":"Tutorial","title":"Unstructured Grids","text":"","category":"section"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"Suppose the computational domain is not a rectangular structured grid, but is instead given as a Finite Elements mesh with node table nodes and element table elements. As an example, consider the seven point star-shaped domain defined by star(). Samples of a random field defined on this domain can be computed as follows.","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"nodes, elements = star()\ncov = CovarianceFunction(2, Matern(0.75, 1))\ngrf = GaussianRandomField(cov, Cholesky(), nodes, elements)","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"To visualize the random field, we can use the function tricontourf from PyPlot.jl.","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"x = view(nodes, :, 1)\ny = view(nodes, :, 2)\ntricontourf(x, y, sample(grf), triangles=elements.-1)","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"<img src=\"assets/star.png\" alt=\"star\" style=\"width:100%\">","category":"page"},{"location":"tutorial/#An-L-shape-1","page":"Tutorial","title":"An L-shape","text":"","category":"section"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"For meshes with a large number of points, an Gaussian random field constructed using Cholesky() or Spectral() can be expensive. As an alternative, KarhunenLoeve(n) uses a bounding box approach that surrounds the Finite Element mesh.","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"nodes, elements = Lshape()\ncov = CovarianceFunction(2, Matern(0.75, 1))\ngrf = GaussianRandomField(cov, KarhunenLoeve(6), nodes, elements)","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"The eigenfunctions in the decomposition are now cut out versions of the eigeinfunctions defined on the surrounding box.","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"x = view(nodes, :, 1)\ny = view(nodes, :, 2)\ntricontourf(x, y, view(grf.data.eigenfunc, :, n), triangles=elements.-1) # n = 1, 2, ..., 6","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"<img src=\"assets/eigenfunctions_star_kl.png\" alt=\"eigenfunctions_star_kl\" style=\"width:100%\">","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"If you insist on using the eigenfunctions defined on the Finite Element mesh, use Spectral() with the optional keyword argument n for the number of terms. This uses the eigs solver from Arpack.jl. Remark that these eigenfunctions are now qualitatively different.","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"grf = GaussianRandomField(cov, Spectral(), nodes, elements, n=6)","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"x = view(nodes, :, 1)\ny = view(nodes, :, 2)\ntricontourf(x, y, view(grf.data.eigenfunc, :, n), triangles=elements.-1) # n = 1, 2, ..., 6","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"<img src=\"assets/eigenfunctions_star_spectral.png\" alt=\"eigenfunctions_star_spectral\" style=\"width:100%\">","category":"page"},{"location":"tutorial/#More-dimensional-Random-Fields-1","page":"Tutorial","title":"More-dimensional Random Fields","text":"","category":"section"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"We can define Gaussian random fields in any dimension. Here's an example with a 5-dimensional random field.","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"cov = CovarianceFunction(5, Whittle(.1))\npts = range(0, stop=1, length=11)\ngrf = GaussianRandomField(cov, CirculantEmbedding(), pts, pts, pts, pts, pts)\nsample(grf)","category":"page"},{"location":"tutorial/#Separable-Random-Fields-1","page":"Tutorial","title":"Separable Random Fields","text":"","category":"section"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"A popular choice are separable covariance functions, such as the separable exponential covariance function. When the 1-norm is used (p=1), the eigenvalues and eigenfunctions in the KL expansion are known analytically.","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"cov = SeparableCovarianceFunction(Exponential(1, p=1), Exponential(1, p=1))\npts = range(0, stop=1, length=1001)\ngrf = GaussianRandomField(cov, KarhunenLoeve(1000), pts, pts)\nheatmap(grf)","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"Samples of a separable random field have some visual artefacts.","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"<img src=\"assets/separable_exponential_grf.png\" alt=\"separable_exponential_grf\" style=\"width:100%\">","category":"page"},{"location":"API/#API-1","page":"API","title":"API","text":"","category":"section"},{"location":"API/#Covariance-Structures-1","page":"API","title":"Covariance Structures","text":"","category":"section"},{"location":"API/#","page":"API","title":"API","text":"CovarianceStructure","category":"page"},{"location":"API/#GaussianRandomFields.CovarianceStructure","page":"API","title":"GaussianRandomFields.CovarianceStructure","text":"Abstract type CovarianceStructure\n\nExamples\n\njulia> Exponential{Float64} <: CovarianceStructure{Float64}\ntrue\n\n\nSee also: IsotropicCovarianceStructure, AnisotropicCovarianceStructure\n\n\n\n\n\n","category":"type"},{"location":"API/#Isotropic-Covariance-Structures-1","page":"API","title":"Isotropic Covariance Structures","text":"","category":"section"},{"location":"API/#","page":"API","title":"API","text":"IsotropicCovarianceStructure\nLinear\nSpherical\nExponential\nWhittle\nSquaredExponential\nGaussian\nMatern","category":"page"},{"location":"API/#GaussianRandomFields.IsotropicCovarianceStructure","page":"API","title":"GaussianRandomFields.IsotropicCovarianceStructure","text":"Abstract type IsotropicCovarianceStructure <: CovarianceStructure\n\nExamples\n\njulia> Exponential{Float64} <: IsotropicCovarianceStructure{Float64}\ntrue\n\njulia> AnisotropicExponential{Float64} <: IsotropicCovarianceStructure{Float64}\nfalse\n\n\nSee also: Exponential, Linear, Spherical, Whittle, Gaussian, SquaredExponential, Matern\n\n\n\n\n\n","category":"type"},{"location":"API/#GaussianRandomFields.Linear","page":"API","title":"GaussianRandomFields.Linear","text":"Linear(λ, [σ = 1], [p = 2])\n\nLinear covariance structure with correlation length λ, (optional) marginal standard deviation σ and (optional) p-norm, defined as\n\nC(x y) = begincases σ left(1 - displaystylefracρλright)  textif ρ  λ 0  textif ρλendcases\n\nwith ρ = x - y_p.\n\nExamples\n\njulia> Linear(0.1)\nlinear (λ=0.1, σ=1.0, p=2.0)\n\njulia> Linear(1.0, σ=2)\nlinear (λ=1.0, σ=2.0, p=2.0)\n\n\nSee also: Exponential, Spherical, Whittle, Gaussian, SquaredExponential, Matern\n\n\n\n\n\n","category":"type"},{"location":"API/#GaussianRandomFields.Spherical","page":"API","title":"GaussianRandomFields.Spherical","text":"Spherical(λ, [σ = 1], [p = 2])\n\nSpherical covariance structure with correlation length λ, (optional) marginal standard deviation σ and (optional) p-norm, defined as\n\nC(x y) = begincases σ left(1 - displaystylefrac32fracρλ + frac12left(fracρλright)^3right)  textfor ρλ0  textfor ρλendcases\n\nwith ρ = x - y_p.\n\nExamples\n\njulia> Spherical(0.1)\nspherical (λ=0.1, σ=1.0, p=2.0)\n\njulia> Spherical(1.0, σ=2)\nspherical (λ=1.0, σ=2.0, p=2.0)\n\n\nSee also: Exponential, Linear, Whittle, Gaussian, SquaredExponential, Matern\n\n\n\n\n\n","category":"type"},{"location":"API/#GaussianRandomFields.Exponential","page":"API","title":"GaussianRandomFields.Exponential","text":"Exponential(λ, [σ = 1], [p = 2])\n\nExponential covariance structure with correlation length λ, (optional) marginal standard deviation σ and (optional) p-norm defined as\n\nC(x y) = σ expleft(-displaystylefracρλright)\n\nwith ρ = x - y_p.\n\nExamples\n\njulia> Exponential(0.1)\nexponential (λ=0.1, σ=1.0, p=2.0)\n\njulia> Exponential(1.0, σ=2)\nexponential (λ=1.0, σ=2.0, p=2.0)\n\n\nSee also: Linear, Spherical, Whittle, Gaussian, SquaredExponential, Matern\n\n\n\n\n\n","category":"type"},{"location":"API/#GaussianRandomFields.Whittle","page":"API","title":"GaussianRandomFields.Whittle","text":"Whittle(λ, [σ = 1], [p = 2])\n\nWhittle covariance structure with correlation length λ, (optional) marginal standard deviation σ and (optional) p-norm, defined as\n\nC(x y) = σ displaystylefracρλ K₁left(fracρλright)\n\nwith ρ = x-y_p.\n\nExamples\n\njulia> Whittle(0.1)\nWhittle (λ=0.1, σ=1.0, p=2.0)\n\njulia> Whittle(1.0, σ=2)\nWhittle (λ=1.0, σ=2.0, p=2.0)\n\n\nSee also: Exponential, Linear, Spherical, Gaussian, SquaredExponential, Matern\n\n\n\n\n\n","category":"type"},{"location":"API/#GaussianRandomFields.SquaredExponential","page":"API","title":"GaussianRandomFields.SquaredExponential","text":"SquaredExponential(λ, [σ = 1], [p = 2])\n\nSquared exponential (Gaussian) covariance structure with correlation length λ, (optional) marginal standard deviation σ and (optional) p-norm, defined as\n\nC(x y) = σ expleft(-left(displaystylefracρλright)^2right)\n\nwith ρ = x - y_p.\n\nExamples\n\njulia> SquaredExponential(0.1)\nGaussian (λ=0.1, σ=1.0, p=2.0)\n\njulia> SquaredExponential(1, σ=2.)\nGaussian (λ=1.0, σ=2.0, p=2.0)\n\n\nSee also: Exponential, Linear, Spherical, Whittle, Gaussian, Matern\n\n\n\n\n\n","category":"type"},{"location":"API/#GaussianRandomFields.Gaussian","page":"API","title":"GaussianRandomFields.Gaussian","text":"Gaussian(λ, [σ = 1], [p = 2])\n\nGaussian (squared exponential) covariance structure with correlation length λ, (optional) marginal standard deviation σ and (optional) p-norm, defined as\n\nC(x y) = σ expleft(-left(displaystylefracρλright)^2right)\n\nwith ρ = x - y_p.\n\nExamples\n\njulia> Gaussian(0.1)\nGaussian (λ=0.1, σ=1.0, p=2.0)\n\njulia> Gaussian(1, σ=2.)\nGaussian (λ=1.0, σ=2.0, p=2.0)\n\n\nSee also: Exponential, Linear, Spherical, Whittle, SquaredExponential, Matern\n\n\n\n\n\n","category":"type"},{"location":"API/#GaussianRandomFields.Matern","page":"API","title":"GaussianRandomFields.Matern","text":"Matern(λ, ν, [σ = 1], [p = 2])\n\nMatérn covariance structure with correlation length λ, smoothness ν, (optional) marginal standard deviation σ and (optional) p-norm, defined as\n\nC(x y) = σ displaystylefrac2^1 - νΓ(ν) left(fracρλright)^ν K_νleft(fracρλright)\n\nwith ρ = x - y_p.\n\nExamples\n\njulia> Matern(0.1, 1.0)\nMatérn (λ=0.1, ν=1.0, σ=1.0, p=2.0)\n\njulia> Matern(1, 1, σ=2.0)\nMatérn (λ=1.0, ν=1.0, σ=2.0, p=2.0)\n\n\nSee also: Exponential, Linear, Spherical, Whittle, Gaussian, SquaredExponential\n\n\n\n\n\n","category":"type"},{"location":"API/#Anisotropic-Covariance-Structures-1","page":"API","title":"Anisotropic Covariance Structures","text":"","category":"section"},{"location":"API/#","page":"API","title":"API","text":"AnisotropicCovarianceStructure\nAnisotropicExponential","category":"page"},{"location":"API/#GaussianRandomFields.AnisotropicCovarianceStructure","page":"API","title":"GaussianRandomFields.AnisotropicCovarianceStructure","text":"Abstract type AnisotropicCovarianceStructure <: CovarianceStructure\n\nExamples\n\njulia> AnisotropicExponential{Float64} <: AnisotropicCovarianceStructure{Float64}\ntrue\n\njulia> Exponential{Float64} <: AnisotropicCovarianceStructure{Float64}\nfalse\n\n\nSee also: AnisotropicExponential\n\n\n\n\n\n","category":"type"},{"location":"API/#GaussianRandomFields.AnisotropicExponential","page":"API","title":"GaussianRandomFields.AnisotropicExponential","text":"AnisotropicExponential(A, [σ = 1])\n\nAnisotropic exponential covariance structure with anisotropy matrix A and (optional) marginal standard deviation σ, defined as\n\nC(x y) = exp(-ρᵀ A ρ)\n\nwhere ρ = x - y.\n\nExamples\n\njulia> A = [1 0.5; 0.5 1]\n2×2 Array{Float64,2}:\n 1.0  0.5\n 0.5  1.0\n\njulia> AnisotropicExponential(A)\nanisotropic exponential (A=[1.0 0.5; 0.5 1.0], σ=1.0)\n\n\n\n\n\n\n","category":"type"},{"location":"API/#Covariance-Functions-1","page":"API","title":"Covariance Functions","text":"","category":"section"},{"location":"API/#","page":"API","title":"API","text":"AbstractCovarianceFunction\nCovarianceFunction\nSeparableCovarianceFunction\napply","category":"page"},{"location":"API/#GaussianRandomFields.AbstractCovarianceFunction","page":"API","title":"GaussianRandomFields.AbstractCovarianceFunction","text":"Abstract type AbstractCovariancFunction\n\nSee also: CovarianceFunction, SeparableCovarianceFunction\n\n\n\n\n\n","category":"type"},{"location":"API/#GaussianRandomFields.CovarianceFunction","page":"API","title":"GaussianRandomFields.CovarianceFunction","text":"CovarianceFunction(d, cov)\n\nCovariance function in d dimensions with covariance structure cov.\n\nExamples\n\njulia> CovarianceFunction(1, Exponential(0.1))\n1d exponential covariance function (λ=0.1, σ=1.0, p=2.0)\n\njulia> CovarianceFunction(2, Matern(0.1, 1.0))\n2d Matérn covariance function (λ=0.1, ν=1.0, σ=1.0, p=2.0)\n\n\n\n\n\n\n","category":"type"},{"location":"API/#GaussianRandomFields.SeparableCovarianceFunction","page":"API","title":"GaussianRandomFields.SeparableCovarianceFunction","text":"SeparableCovarianceFunction(cov...)\n\nSeparable covariance function in length(cov) dimensions for the covariance structures cov. Usefull for defining anisotropic covariance functions, or if the non-seperable KarhunenLoeve expansion is too expensive.\n\nExamples\n\njulia> SeparableCovarianceFunction(Exponential(0.1), Matern(0.01, 1.0))\n2d separable covariance function [ exponential (λ=0.1, σ=1.0, p=2.0), Matérn (λ=0.01, ν=1.0, σ=1.0, p=2.0) ]\n\n\nSee also: CovarianceFunction, KarhunenLoeve\n\n\n\n\n\n","category":"type"},{"location":"API/#GaussianRandomFields.apply","page":"API","title":"GaussianRandomFields.apply","text":"apply(cov, pts...)\n\nReturns the covariance matrix, i.e., the covariance function cov evaluated in the points x.\n\nExamples\n\njulia> exponential_covariance = CovarianceFunction(1, Exponential(1))\n1d exponential covariance function (λ=1.0, σ=1.0, p=2.0)\n\njulia> pts = range(0, stop=1, length=11)\n0.0:0.1:1.0\n\njulia> C = apply(exponential_covariance, pts)\n[...]\n\njulia> heatmap(C)\n[...]\n\njulia> whittle_covariance = CovarianceFunction(2, Whittle(1))\n2d Whittle covariance function (λ=1.0, σ=1.0, p=2.0)\n\njulia> C = apply(whittle_covariance, pts, pts)\n[...]\n\njulia> heatmap(C)\n[...]\n\n\nSee also: CovarianceFunction, Exponential, Whittle\n\n\n\n\n\n","category":"function"},{"location":"API/#Gaussian-Random-Field-Generators-1","page":"API","title":"Gaussian Random Field Generators","text":"","category":"section"},{"location":"API/#","page":"API","title":"API","text":"GaussianRandomFieldGenerator","category":"page"},{"location":"API/#GaussianRandomFields.GaussianRandomFieldGenerator","page":"API","title":"GaussianRandomFields.GaussianRandomFieldGenerator","text":"Abstract type GaussianRandomFieldGenerator\n\nThe following Gaussian random field generators are implemented:\n\nCholesky: Cholesky factorization of the covariance matrix, exact but expensive for random fields in dimension d > 1 \nSpectral: spectral (eigenvalue) decomposition of the covariance matrix, exact but expensive for random fields in dimension d > 1\nKarhunenLoeve: Karhunen-Loève expansion, inexact but very efficient for \"smooth\" random fields when used with a low truncation dimension \nCirculantEmbedding: circulant embedding method, exact and efficient, but can only be used for random fields on structured grids\n\nSee also: Cholesky, Spectral, KarhunenLoeve, CirculantEmbedding\n\n\n\n\n\n","category":"type"},{"location":"API/#Cholesky-Factorization-1","page":"API","title":"Cholesky Factorization","text":"","category":"section"},{"location":"API/#","page":"API","title":"API","text":"Cholesky","category":"page"},{"location":"API/#GaussianRandomFields.Cholesky","page":"API","title":"GaussianRandomFields.Cholesky","text":"Cholesky()\n\nRetuns a GaussianRandomFieldGenerator based on a Cholesky factorization of the covariance matrix.\n\nExamples\n\njulia> cov = CovarianceFunction(2, Matern(.3, 1))\n2d Matérn covariance function (λ=0.3, ν=1.0, σ=1.0, p=2.0)\n\njulia> pts = range(0, stop=1, length=51) \n0.0:0.02:1.0\n\njulia> grf = GaussianRandomField(cov, Cholesky(), pts, pts)\nGaussian random field with 2d Matérn covariance function (λ=0.3, ν=1.0, σ=1.0, p=2.0) on a 51×51 structured grid, using a Cholesky decomposition\n\njulia> heatmap(grf) \n[...]\n\n\nwarning: Warning\nThe Cholesky factorization requires the covariance matrix to be symmetric and positive definite. If the covariance matrix is not positive definite, an error will be thrown. Try using the Spectral method in that case.\n\nSee also: Spectral, KarhunenLoeve, CirculantEmbedding\n\n\n\n\n\n","category":"type"},{"location":"API/#Spectral-Decomposition-1","page":"API","title":"Spectral Decomposition","text":"","category":"section"},{"location":"API/#","page":"API","title":"API","text":"Spectral","category":"page"},{"location":"API/#GaussianRandomFields.Spectral","page":"API","title":"GaussianRandomFields.Spectral","text":"Spectral()\n\nReturns a GaussianRandomFieldGenerator based on a spectral (eigenvalue) decomposition of the covariance matrix.\n\nOptional Arguments for GaussianRandomField\n\nn::Integer: the number of eigenvalues to compute. By default, we compute all eigenvalues.\neigensolver::EigenSolver: which method to use for the eigenvalue decomposition (see AbstractEigenSolver). The default is EigenSolver().\n\nExamples\n\njulia> cov = CovarianceFunction(2, Matern(.3, 1))\n2d Matérn covariance function (λ=0.3, ν=1.0, σ=1.0, p=2.0)\n\njulia> pts = range(0, stop=1, length=51)\n0.0:0.02:1.0\n\njulia> grf = GaussianRandomField(cov, Spectral(), pts, pts)\nGaussian random field with 2d Matérn covariance function (λ=0.3, ν=1.0, σ=1.0, p=2.0) on a 51×51 structured grid, using a spectral decomposition\n\njulia> heatmap(grf) \n[...]\n\n\ntip: Tip\nTry using the Karhunen-Loève expansion if evaluating the covariance matrix is too expensive.\n\nThis is also useful when computing Gaussian random fields on a Finite Element mesh using a truncated KL expansion. Here's an example that computes the first 10 eigenfunctions on an L-shaped domain.\n\njulia> cov = CovarianceFunction(2, Matern(.3, 1))\n2d Matérn covariance function (λ=0.3, ν=1.0, σ=1.0, p=2.0)\n\njulia> p, t = Lshape()\n[...]\n\njulia> grf = GaussianRandomField(cov, Spectral(), p, t, n=10)\nGaussian random field with 2d Matérn covariance function (λ=0.3, ν=1.0, σ=1.0, p=2.0) on a mesh with 998 points and 1861 elements, using a spectral decomposition\n\n\nSee also: Cholesky, KarhunenLoeve, CirculantEmbedding\n\n\n\n\n\n","category":"type"},{"location":"API/#Karhunen-Loève-Decomposition-1","page":"API","title":"Karhunen Loève Decomposition","text":"","category":"section"},{"location":"API/#","page":"API","title":"API","text":"KarhunenLoeve\nrel_error","category":"page"},{"location":"API/#GaussianRandomFields.KarhunenLoeve","page":"API","title":"GaussianRandomFields.KarhunenLoeve","text":"KarhunenLoeve(n)\n\nReturns a GaussianRandomFieldGenerator using a Karhunen-Loève (KL) expansion with n terms. \n\nOptional Arguments for GaussianRandomField\n\nquad::QuadratureRule: quadrature rule used for the integral equation (see QuadratureRule), default is EOLE(). \nnq::Integer: number of quadrature points in each dimension, where we require nq^d > n. Default is nq = ceil(n^(1/d)).\neigensolver::EigenSolver: which method to use for the eigenvalue decomposition (see AbstractEigenSolver). The default is EigenSolver().\n\nExamples\n\njulia> cov = CovarianceFunction(2, Matern(.3, 1))\n2d Matérn covariance function (λ=0.3, ν=1.0, σ=1.0, p=2.0)\n\njulia> pts = range(0, stop=1, length=51)\n0.0:0.02:1.0\n\njulia> grf = GaussianRandomField(cov, KarhunenLoeve(300), pts, pts)\nGaussian random field with 2d Matérn covariance function (λ=0.3, ν=1.0, σ=1.0, p=2.0) on a 51×51 structured grid, using a KL expansion with 300 terms\n\njulia> plot_eigenvalues(grf) # plot the eigenvalue decay\n[...]\n\njulia> plot_eigenfunction(grf, 4) # plots the fourth eigenfunction\n[...]\n\n\nIf more terms n are used in the expansion, the approximation becomes better.\n\njulia> for n in [1, 2, 5, 10, 20, 50, 100, 200, 500, 1000]\n           grf = GaussianRandomField(cov, KarhunenLoeve(n), pts, pts)\n           println(rel_error(grf))\n       end\n0.6983828486813854\n0.454941868632304\n0.23231277904920067\n0.10079295313241687\n0.026470201665282467\n0.009784266729696567\n0.003565488318168386\n0.0010719081249264129\n0.00019809766995382283\n4.085273649512278e-5\n\n\nnote: Note\nTechniqually, the KL expansion is computed using the Nystrom method. For nonstructured grids, we use a bounding box approach. Try using the Spectral method if this is not what you want.\n\nwarning: Warning\nTo avoid an end effect in the eigenvalue decay, choose nq^d ≥ 5n.\n\njulia> grf = GaussianRandomField(cov, KarhunenLoeve(300), pts, pts, quad=GaussLegendre())\nGaussian random field with 2d Matérn covariance function (λ=0.3, ν=1.0, σ=1.0, p=2.0) on a 51×51 structured grid, using a KL expansion with 300 terms\n\njulia> grf = GaussianRandomField(cov, KarhunenLoeve(300), pts, pts, nq=40)\nGaussian random field with 2d Matérn covariance function (λ=0.3, ν=1.0, σ=1.0, p=2.0) on a 51×51 structured grid, using a KL expansion with 300 terms\n\n\nSee also: Cholesky, Spectral, CirculantEmbedding\n\n\n\n\n\n","category":"type"},{"location":"API/#GaussianRandomFields.rel_error","page":"API","title":"GaussianRandomFields.rel_error","text":"rel_error(grf)\n\nReturns the relative error in the Karhunen-Loève approximation of the random field, computed as\n\n1 - displaystylefracsum theta_j^2sigma^2 int_D mathrmdx.\n\nOnly useful for fields defined on a rectangular domain.\n\nExamples\n\njulia> cov = CovarianceFunction(2, Matern(.3, 1))\n2d Matérn covariance function (λ=0.3, ν=1.0, σ=1.0, p=2.0)\n\njulia> pts = range(0, stop=1, length=51)\n0.0:0.02:1.0\n\njulia> grf = GaussianRandomField(cov, KarhunenLoeve(300), pts, pts)\nGaussian random field with 2d Matérn covariance function (λ=0.3, ν=1.0, σ=1.0, p=2.0) on a 51×51 structured grid, using a KL expansion with 300 terms\n\njulia> rel_error(grf)\n0.00046070730242930846\n\n\n\n\n\n\n","category":"function"},{"location":"API/#Circulant-Embedding-1","page":"API","title":"Circulant Embedding","text":"","category":"section"},{"location":"API/#","page":"API","title":"API","text":"CirculantEmbedding","category":"page"},{"location":"API/#GaussianRandomFields.CirculantEmbedding","page":"API","title":"GaussianRandomFields.CirculantEmbedding","text":"CirculantEmbedding()\n\nReturns a GaussianRandomFieldGenerator that uses FFTs to compute samples of the Gaussian random field.\n\nwarning: Warning\nCirculant embedding can only be applied if the points are specified on a structured grid.\n\nOptional Arguments for GaussianRandomField\n\nminnpadding::Integer: minimum amount of padding.\nmeasure::Bool: optimize the FFT to increase the efficiency of the sample method. Default is true.\nprimes::Bool: the size of the minimum circulant embedding of the covariance matrix can be written as a product of small primes (2, 3, 5 and 7). Default is false.\n\nExamples\n\njulia> cov = CovarianceFunction(2, Matern(.1, 1))\n2d Matérn covariance function (λ=0.1, ν=1.0, σ=1.0, p=2.0)\n\njulia> pts = range(0, stop=1, length=51)\n0.0:0.02:1.0\n\njulia> grf = GaussianRandomField(cov, CirculantEmbedding(), pts, pts)\nGaussian random field with 2d Matérn covariance function (λ=0.1, ν=1.0, σ=1.0, p=2.0) on a 51×51 structured grid, using a circulant embedding\n\njulia> contourf(grf)\n[...]\n\njulia> plot_eigenvalues(grf)\n[...]\n\n\nnote: Note\nWith appropriate ordering, the covariance matrix of a Gaussian random field is a (nested block) Toeplitz matrix. This matrix can be embedded into a larger (nested block) circulant matrix, whose eigenvalues can be rapidly computed using FFT. A difficulty here is that although the covariance matrix is positive semi-definite, its circulant extension in general is not. As a remedy, one can add so-called ghost points outside the domain of interest using the optional flag minpadding.\n\njulia> cov = CovarianceFunction(2, Matern(.3, 1))\n2d Matérn covariance function (λ=0.3, ν=1.0, σ=1.0, p=2.0)\n\njulia> pts = range(0, stop=1, length=51)\n0.0:0.02:1.0\n\njulia> grf = GaussianRandomField(cov, CirculantEmbedding(), pts, pts)\n┌ Warning: 318 negative eigenvalues ≥ -0.5828339433508111 detected, Gaussian random field will be approximated (ignoring all negative eigenvalues); increase padding if possible\n└ @ GaussianRandomFields ~/.julia/dev/GaussianRandomFields/src/generators/circulant_embedding.jl:94\nGaussian random field with 2d Matérn covariance function (λ=0.3, ν=1.0, σ=1.0, p=2.0) on a 51×51 structured grid, using a circulant embedding\n\njulia> grf = GaussianRandomField(cov, CirculantEmbedding(), pts, pts, minpadding=79)\nGaussian random field with 2d Matérn covariance function (λ=0.3, ν=1.0, σ=1.0, p=2.0) on a 51×51 structured grid, using a circulant embedding\n\n\nSee also: Cholesky, Spectral, KarhunenLoeve\n\n\n\n\n\n","category":"type"},{"location":"API/#Gaussian-Random-Fields-1","page":"API","title":"Gaussian Random Fields","text":"","category":"section"},{"location":"API/#","page":"API","title":"API","text":"GaussianRandomField\nsample\nranddim","category":"page"},{"location":"API/#GaussianRandomFields.GaussianRandomField","page":"API","title":"GaussianRandomFields.GaussianRandomField","text":"GaussianRandomField([mean,] cov, generator, pts...)\nGaussianRandomField([mean,] cov, generator, nodes, elements)\n\nCompute a Gaussian random field with mean mean and covariance structure cov defined in the points pts, and computed using the Gaussian random field generator generator.\n\nExamples\n\njulia> cov = CovarianceFunction(2, Matern(.3, 1))\n2d Matérn covariance function (λ=0.3, ν=1.0, σ=1.0, p=2.0)\n\njulia> pts = pts = range(0, stop=1, length=51)\n0.0:0.02:1.0\n\njulia> mean = fill(π, (51, 51))\n[...]\n\njulia> grf = GaussianRandomField(mean, cov, Cholesky(), pts, pts)\nGaussian random field with 2d Matérn covariance function (λ=0.3, ν=1.0, σ=1.0, p=2.0) on a 51×51 structured grid, using a Cholesky decomposition\n\n\nIf no mean is specified, a zero-mean Gaussian random field is assumed.\n\njulia> grf = GaussianRandomField(cov, Cholesky(), pts, pts)\nGaussian random field with 2d Matérn covariance function (λ=0.3, ν=1.0, σ=1.0, p=2.0) on a 51×51 structured grid, using a Cholesky decomposition\n\n\nThe  Gaussian random field generator generator can be Cholesky(), Spectral(), KarhunenLoeve(n) (where n is the number of terms in the expansion), or CirculantEmbedding(). The points pts can be specified as arguments of type AbstractVector, in which case a tensor (Kronecker) product is assumed, or as a Finite Element mesh with node table nodes and element table elements.\n\njulia> grf = GaussianRandomField(cov, KarhunenLoeve(500), pts, pts)\nGaussian random field with 2d Matérn covariance function (λ=0.3, ν=1.0, σ=1.0, p=2.0) on a 51×51 structured grid, using a KL expansion with 500 terms\n\njulia> exponential_cov = CovarianceFunction(2, Exponential(.1))\n2d exponential covariance function (λ=0.1, σ=1.0, p=2.0)\n\njulia> grf = GaussianRandomField(exponential_cov, CirculantEmbedding(), pts, pts)\nGaussian random field with 2d exponential covariance function (λ=0.1, σ=1.0, p=2.0) on a 51×51 structured grid, using a circulant embedding\n\n\nSeparable Gaussian random fields can be defined using SeparableCovarianceFunction.\n\njulia> separable_cov = SeparableCovarianceFunction(Exponential(.1), Exponential(.1))\n2d separable covariance function [ exponential (λ=0.1, σ=1.0, p=2.0), exponential (λ=0.1, σ=1.0, p=2.0) ]\n\njulia> grf = GaussianRandomField(separable_cov, KarhunenLoeve(500), pts, pts)\nGaussian random field with 2d separable covariance function [ exponential (λ=0.1, σ=1.0, p=2.0), exponential (λ=0.1, σ=1.0, p=2.0) ] on a 51×51 structured grid, using a KL expansion with 500 terms\n\njulia> plot_eigenfunction(grf, 3)\n[...]\n\n\nWe also offer support for anisotropic random fields.\n\njulia> anisotropic_cov = CovarianceFunction(2, AnisotropicExponential([500 400; 400 500]))\n2d anisotropic exponential covariance function (A=[500 400; 400 500], σ=1.0)\n\njulia> grf = GaussianRandomField(anisotropic_cov, CirculantEmbedding() , pts, pts)\nGaussian random field with 2d anisotropic exponential covariance function (A=[500 400; 400 500], σ=1.0) on a 51×51 structured grid, using a circulant embedding\n\njulia> heatmap(grf)\n[...]\n\n\nFor irregular domains, specify the points as matrices containing the nodes and elements of a finite element mesh. To compute the value of the random field at the element centers, use the optional keyword mode=\"center\".\n\njulia> nodes, elements = Lshape()\n[...]\n\njulia> grf = GaussianRandomField(cov, Spectral(), nodes, elements)\nGaussian random field with 2d Matérn covariance function (λ=0.3, ν=1.0, σ=1.0, p=2.0) on a mesh with 998 points and 1861 elements, using a spectral decomposition\n\n\nAlternativly, simply pass a Matrix{T} of size N by d to compute the random field at un unstructured grid defined by the given set of points.\n\nSamples from the random field can be computed using the sample function.\n\njulia> sample(grf)\n[...]\n\n\nSee also: Cholesky, Spectral, KarhunenLoeve, CirculantEmbedding, sample\n\n\n\n\n\n","category":"type"},{"location":"API/#GaussianRandomFields.sample","page":"API","title":"GaussianRandomFields.sample","text":"sample(grf)\n    sample(grf[, xi])\n\nTake a sample from the Gaussian random field grf using the (optional) normally distributed random numbers xi. The vectorxi must have appropriate length.\n\nExamples\n\njulia> cov = CovarianceFunction(2, Whittle(.1))\n2d Whittle covariance function (λ=0.1, σ=1.0, p=2.0)\n\njulia> pts = pts = range(0, stop=1, length=51)\n0.0:0.02:1.0\n\njulia> grf = GaussianRandomField(cov, CirculantEmbedding(), pts, pts)\nGaussian random field with 2d Whittle covariance function (λ=0.1, σ=1.0, p=2.0) on a 51×51 structured grid, using a circulant embedding\n\njulia> sample(grf)\n[...]\n\njulia> sample(grf, xi=randn(randdim(grf)))\n[...]\n\nSee also: GaussianRandomField, Matern, CovarianceFunction, [CirculantEmbedding]\n\n\n\n\n\n","category":"function"},{"location":"API/#GaussianRandomFields.randdim","page":"API","title":"GaussianRandomFields.randdim","text":"randdim(grf)\n\nReturns the number of random numbers used to sample from the Gaussian random field grf.\n\nExamples\n\njulia> cov = CovarianceFunction(2, Whittle(.1))\n2d Whittle covariance function (λ=0.1, σ=1.0, p=2.0)\n\njulia> pts = pts = range(0, stop=1, length=51)\n0.0:0.02:1.0\n\njulia> grf = GaussianRandomField(cov, KarhunenLoeve(200), pts, pts)\nGaussian random field with 2d Whittle covariance function (λ=0.1, σ=1.0, p=2.0) on a 51×51 structured grid, using a KL expansion with 200 terms\n\njulia> randdim(grf)\n200\n\n\n\n\n\n\n","category":"function"},{"location":"API/#Plotting-1","page":"API","title":"Plotting","text":"","category":"section"},{"location":"API/#","page":"API","title":"API","text":"plot\nplot!\nsurface\ncontour\ncontourf\nheatmap\nplot_eigenvalues\nplot_eigenfunction\nplot_covariance_matrix","category":"page"},{"location":"API/#GaussianRandomFields.plot_eigenvalues","page":"API","title":"GaussianRandomFields.plot_eigenvalues","text":"plot_eigenvalues(grf)\n\nLog-log plot of the eigenvalues of the Gaussian random field. Only available for Gaussian random field generators of type Spectral, KarhunenLoeve and CirculantEmbedding.\n\nExamples\n\njulia> cov = CovarianceFunction(2, Gaussian(.1))\n2d Gaussian covariance function (λ=0.1, σ=1.0, p=2.0)\n\njulia> pts = range(0, stop=1, length=51)\n0.0:0.02:1.0\n\njulia> grf = GaussianRandomField(cov, KarhunenLoeve(100), pts, pts)\nGaussian random field with 2d Gaussian covariance function (λ=0.1, σ=1.0, p=2.0) on a 51×51 structured grid, using a KL expansion with 100 terms\n\njulia> plot_eigenvalues(grf)\n[...]\n\n\nSee also: plot_eigenfunction\n\n\n\n\n\n","category":"function"},{"location":"API/#GaussianRandomFields.plot_eigenfunction","page":"API","title":"GaussianRandomFields.plot_eigenfunction","text":"plot_eigenfunction(grf, n)\n\nContour plot of the nth eigenfunction of the Gaussian random field. Only available for Gaussian random field generators of type Spectral and KarhunenLoeve.\n\nExamples\n\njulia> cov = CovarianceFunction(2, Gaussian(.1))\n2d Gaussian covariance function (λ=0.1, σ=1.0, p=2.0)\n\njulia> pts = range(0, stop=1, length=51)\n0.0:0.02:1.0\n\njulia> grf = GaussianRandomField(cov, KarhunenLoeve(100), pts, pts)\nGaussian random field with 2d Gaussian covariance function (λ=0.1, σ=1.0, p=2.0) on a 51×51 structured grid, using a KL expansion with 100 terms\n\njulia> plot_eigenfunction(grf, 6) # 6th eigenfunction\n[...]\n\n\nSee also: plot_eigenfunction\n\n\n\n\n\n","category":"function"},{"location":"API/#GaussianRandomFields.plot_covariance_matrix","page":"API","title":"GaussianRandomFields.plot_covariance_matrix","text":"plot_covariance_matrix(grf[, pts...])\n\nEvaluate the covariance function of the Gaussian random field `grf` in the (optional) points `pts` and plot the result.\n\nExamples\n\njulia> cov = CovarianceFunction(2, Matern(.3, 1))\n2d Matérn covariance function (λ=0.3, ν=1.0, σ=1.0, p=2.0)\n\njulia> pts = range(0, stop=1, length=11)\n0.0:0.1:1.0\n\njulia> grf = GaussianRandomField(cov, CirculantEmbedding(), pts, pts, minpadding=7)\nGaussian random field with 2d Matérn covariance function (λ=0.3, ν=1.0, σ=1.0, p=2.0) on a 11×11 structured grid, using a circulant embedding\n\njulia> plot_covariance_matrix(grf)\n[...]\n\njulia> pts = range(0, stop=1, length=21)\n0.0:0.05:1.0\n\njulia> plot_covariance_matrix(grf, pts, pts)\n[...]\n\n\n\n\n\n\n","category":"function"},{"location":"API/#Unstructured-Meshes-1","page":"API","title":"Unstructured Meshes","text":"","category":"section"},{"location":"API/#","page":"API","title":"API","text":"star\nLshape","category":"page"},{"location":"API/#GaussianRandomFields.star","page":"API","title":"GaussianRandomFields.star","text":"nodes, elements = star()\n\nReturns the 720 nodes and 1284 elements of a star.\n\n\n\n\n\n","category":"function"},{"location":"API/#GaussianRandomFields.Lshape","page":"API","title":"GaussianRandomFields.Lshape","text":"nodes, elements = Lshape()\n\nReturns the 998 nodes and 1861 elements of an L-shape.\n\n\n\n\n\n","category":"function"},{"location":"API/#Utilities-1","page":"API","title":"Utilities","text":"","category":"section"},{"location":"API/#","page":"API","title":"API","text":"QuadratureRule\nMidpoint\nTrapezoidal\nSimpson\nGaussLegendre\nEOLE\nAbstractEigenSolver\nEigenSolver\nEigsSolver","category":"page"},{"location":"API/#GaussianRandomFields.QuadratureRule","page":"API","title":"GaussianRandomFields.QuadratureRule","text":"Abstract type QuadratureRule\n\nThe following quadrature rules are implemented:\n\nMidpoint::QuadratureRule: the midpoint rule\nTrapezoidal::QuadratureRule: the trapezoidal rule\nSimpson::QuadratureRule: Simpson's rule\nGaussLegendre::QuadratureRule: Gauss-Legendre quadrature rule\nEOLE::QuadratureRule: expansion-optimal linear estimation\n\nSee also: Midpoint, Trapezoidal, Simpson, GaussLegendre, EOLE\n\n\n\n\n\n","category":"type"},{"location":"API/#GaussianRandomFields.Midpoint","page":"API","title":"GaussianRandomFields.Midpoint","text":"Midpoint()\n\nThe midpoint rule.\n\nSee also: Trapezoidal, Simpson, GaussLegendre, EOLE\n\n\n\n\n\n","category":"type"},{"location":"API/#GaussianRandomFields.Trapezoidal","page":"API","title":"GaussianRandomFields.Trapezoidal","text":"Trapezoidal()\n\nThe trapezoidal rule.\n\nSee also: Midpoint, Simpson, GaussLegendre, EOLE\n\n\n\n\n\n","category":"type"},{"location":"API/#GaussianRandomFields.Simpson","page":"API","title":"GaussianRandomFields.Simpson","text":"Simpson()\n\nSimpson's method.\n\nSee also: Midpoint, Trapezoidal, GaussLegendre, EOLE\n\n\n\n\n\n","category":"type"},{"location":"API/#GaussianRandomFields.GaussLegendre","page":"API","title":"GaussianRandomFields.GaussLegendre","text":"GaussLegendre()\n\nGauss-Legendre quadrature method.\n\nSee also: Midpoint, Trapezoidal, Simpson, EOLE\n\n\n\n\n\n","category":"type"},{"location":"API/#GaussianRandomFields.EOLE","page":"API","title":"GaussianRandomFields.EOLE","text":"EOLE()\n\nExpansion-optimal linear estimation.\n\nSee also: Midpoint, Trapezoidal, Simpson, GaussLegendre\n\n\n\n\n\n","category":"type"},{"location":"API/#GaussianRandomFields.AbstractEigenSolver","page":"API","title":"GaussianRandomFields.AbstractEigenSolver","text":"Abstract type AbstractEigenSolver\n\nThe following eigensolvers are implemented: -EigenSolver<:AbstractEigenSolver: eigenvalue decomposition using eigen -EigsSolver<:AbstractEigenSolver: eigenvalue decomposition using eigs\n\nSee also: EigenSolver, EigsSolver\n\n\n\n\n\n","category":"type"},{"location":"API/#GaussianRandomFields.EigenSolver","page":"API","title":"GaussianRandomFields.EigenSolver","text":"EigenSolver()\n\nEigenvalue decomposition using eigen.\n\nSee also: EigsSolver\n\n\n\n\n\n","category":"type"},{"location":"API/#GaussianRandomFields.EigsSolver","page":"API","title":"GaussianRandomFields.EigsSolver","text":"EigsSolver()\n\nEigenvalue decomposition using eigs.\n\nSee also: EigenSolver\n\n\n\n\n\n","category":"type"}]
}
